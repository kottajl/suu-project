// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: package_service.proto
#ifndef GRPC_package_5fservice_2eproto__INCLUDED
#define GRPC_package_5fservice_2eproto__INCLUDED

#include "package_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace package {

class PackageService final {
 public:
  static constexpr char const* service_full_name() {
    return "package.PackageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>> updatePackages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>>(updatePackagesRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>> AsyncupdatePackages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>>(AsyncupdatePackagesRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>> PrepareAsyncupdatePackages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>>(PrepareAsyncupdatePackagesRaw(context, cq));
    }
    virtual ::grpc::Status createPackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::package::PackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>> AsynccreatePackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>>(AsynccreatePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>> PrepareAsynccreatePackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>>(PrepareAsynccreatePackageRaw(context, request, cq));
    }
    virtual ::grpc::Status getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::package::PackageStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>> AsyncgetPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>>(AsyncgetPackageStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>> PrepareAsyncgetPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>>(PrepareAsyncgetPackageStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::package::DeliveredCount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>> AsyncgetDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>>(AsyncgetDeliveredCountByVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>> PrepareAsyncgetDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>>(PrepareAsyncgetDeliveredCountByVehicleRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void updatePackages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::package::PackageUpdate,::package::PackageInstruction>* reactor) = 0;
      virtual void createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>* updatePackagesRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>* AsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::package::PackageUpdate, ::package::PackageInstruction>* PrepareAsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>* AsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageResponse>* PrepareAsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>* AsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::PackageStatusResponse>* PrepareAsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>* AsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::package::DeliveredCount>* PrepareAsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>> updatePackages(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>>(updatePackagesRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>> AsyncupdatePackages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>>(AsyncupdatePackagesRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>> PrepareAsyncupdatePackages(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>>(PrepareAsyncupdatePackagesRaw(context, cq));
    }
    ::grpc::Status createPackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::package::PackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>> AsynccreatePackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>>(AsynccreatePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>> PrepareAsynccreatePackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>>(PrepareAsynccreatePackageRaw(context, request, cq));
    }
    ::grpc::Status getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::package::PackageStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>> AsyncgetPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>>(AsyncgetPackageStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>> PrepareAsyncgetPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>>(PrepareAsyncgetPackageStatusRaw(context, request, cq));
    }
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::package::DeliveredCount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>> AsyncgetDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>>(AsyncgetDeliveredCountByVehicleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>> PrepareAsyncgetDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>>(PrepareAsyncgetDeliveredCountByVehicleRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void updatePackages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::package::PackageUpdate,::package::PackageInstruction>* reactor) override;
      void createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, std::function<void(::grpc::Status)>) override;
      void createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, std::function<void(::grpc::Status)>) override;
      void getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* updatePackagesRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* AsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* PrepareAsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>* AsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::PackageResponse>* PrepareAsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>* AsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>* PrepareAsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>* AsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>* PrepareAsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_updatePackages_;
    const ::grpc::internal::RpcMethod rpcmethod_createPackage_;
    const ::grpc::internal::RpcMethod rpcmethod_getPackageStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getDeliveredCountByVehicle_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status updatePackages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* stream);
    virtual ::grpc::Status createPackage(::grpc::ServerContext* context, const ::package::PackageData* request, ::package::PackageResponse* response);
    virtual ::grpc::Status getPackageStatus(::grpc::ServerContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response);
    virtual ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_updatePackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updatePackages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_updatePackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePackages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePackages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createPackage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreatePackage(::grpc::ServerContext* context, ::package::PackageData* request, ::grpc::ServerAsyncResponseWriter< ::package::PackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPackageStatus(::grpc::ServerContext* context, ::package::PackageStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::package::PackageStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeliveredCountByVehicle(::grpc::ServerContext* context, ::package::VehicleQuery* request, ::grpc::ServerAsyncResponseWriter< ::package::DeliveredCount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_updatePackages<WithAsyncMethod_createPackage<WithAsyncMethod_getPackageStatus<WithAsyncMethod_getDeliveredCountByVehicle<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_updatePackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updatePackages() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::package::PackageUpdate, ::package::PackageInstruction>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->updatePackages(context); }));
    }
    ~WithCallbackMethod_updatePackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePackages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::package::PackageUpdate, ::package::PackageInstruction>* updatePackages(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createPackage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::package::PackageData, ::package::PackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::package::PackageData* request, ::package::PackageResponse* response) { return this->createPackage(context, request, response); }));}
    void SetMessageAllocatorFor_createPackage(
        ::grpc::MessageAllocator< ::package::PackageData, ::package::PackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::package::PackageData, ::package::PackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::package::PackageStatusRequest, ::package::PackageStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response) { return this->getPackageStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getPackageStatus(
        ::grpc::MessageAllocator< ::package::PackageStatusRequest, ::package::PackageStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::package::PackageStatusRequest, ::package::PackageStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPackageStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::package::VehicleQuery, ::package::DeliveredCount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response) { return this->getDeliveredCountByVehicle(context, request, response); }));}
    void SetMessageAllocatorFor_getDeliveredCountByVehicle(
        ::grpc::MessageAllocator< ::package::VehicleQuery, ::package::DeliveredCount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::package::VehicleQuery, ::package::DeliveredCount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeliveredCountByVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_updatePackages<WithCallbackMethod_createPackage<WithCallbackMethod_getPackageStatus<WithCallbackMethod_getDeliveredCountByVehicle<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_updatePackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updatePackages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_updatePackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePackages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createPackage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_updatePackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updatePackages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_updatePackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePackages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePackages(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createPackage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreatePackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPackageStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeliveredCountByVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updatePackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updatePackages() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->updatePackages(context); }));
    }
    ~WithRawCallbackMethod_updatePackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePackages(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* updatePackages(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createPackage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createPackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPackageStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPackageStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDeliveredCountByVehicle(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeliveredCountByVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createPackage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::package::PackageData, ::package::PackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::package::PackageData, ::package::PackageResponse>* streamer) {
                       return this->StreamedcreatePackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createPackage(::grpc::ServerContext* /*context*/, const ::package::PackageData* /*request*/, ::package::PackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreatePackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::package::PackageData,::package::PackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPackageStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPackageStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::package::PackageStatusRequest, ::package::PackageStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::package::PackageStatusRequest, ::package::PackageStatusResponse>* streamer) {
                       return this->StreamedgetPackageStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPackageStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPackageStatus(::grpc::ServerContext* /*context*/, const ::package::PackageStatusRequest* /*request*/, ::package::PackageStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPackageStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::package::PackageStatusRequest,::package::PackageStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDeliveredCountByVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDeliveredCountByVehicle() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::package::VehicleQuery, ::package::DeliveredCount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::package::VehicleQuery, ::package::DeliveredCount>* streamer) {
                       return this->StreamedgetDeliveredCountByVehicle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDeliveredCountByVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDeliveredCountByVehicle(::grpc::ServerContext* /*context*/, const ::package::VehicleQuery* /*request*/, ::package::DeliveredCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDeliveredCountByVehicle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::package::VehicleQuery,::package::DeliveredCount>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createPackage<WithStreamedUnaryMethod_getPackageStatus<WithStreamedUnaryMethod_getDeliveredCountByVehicle<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createPackage<WithStreamedUnaryMethod_getPackageStatus<WithStreamedUnaryMethod_getDeliveredCountByVehicle<Service > > > StreamedService;
};

}  // namespace package


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_package_5fservice_2eproto__INCLUDED
