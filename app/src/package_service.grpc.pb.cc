// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: package_service.proto

#include "package_service.pb.h"
#include "package_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace package {

static const char* PackageService_method_names[] = {
  "/package.PackageService/updatePackages",
  "/package.PackageService/createPackage",
  "/package.PackageService/getPackageStatus",
  "/package.PackageService/getDeliveredCountByVehicle",
};

std::unique_ptr< PackageService::Stub> PackageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PackageService::Stub> stub(new PackageService::Stub(channel, options));
  return stub;
}

PackageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_updatePackages_(PackageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_createPackage_(PackageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPackageStatus_(PackageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeliveredCountByVehicle_(PackageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* PackageService::Stub::updatePackagesRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::package::PackageUpdate, ::package::PackageInstruction>::Create(channel_.get(), rpcmethod_updatePackages_, context);
}

void PackageService::Stub::async::updatePackages(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::package::PackageUpdate,::package::PackageInstruction>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::package::PackageUpdate,::package::PackageInstruction>::Create(stub_->channel_.get(), stub_->rpcmethod_updatePackages_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* PackageService::Stub::AsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::package::PackageUpdate, ::package::PackageInstruction>::Create(channel_.get(), cq, rpcmethod_updatePackages_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::package::PackageUpdate, ::package::PackageInstruction>* PackageService::Stub::PrepareAsyncupdatePackagesRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::package::PackageUpdate, ::package::PackageInstruction>::Create(channel_.get(), cq, rpcmethod_updatePackages_, context, false, nullptr);
}

::grpc::Status PackageService::Stub::createPackage(::grpc::ClientContext* context, const ::package::PackageData& request, ::package::PackageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::package::PackageData, ::package::PackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createPackage_, context, request, response);
}

void PackageService::Stub::async::createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::package::PackageData, ::package::PackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createPackage_, context, request, response, std::move(f));
}

void PackageService::Stub::async::createPackage(::grpc::ClientContext* context, const ::package::PackageData* request, ::package::PackageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createPackage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::package::PackageResponse>* PackageService::Stub::PrepareAsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::package::PackageResponse, ::package::PackageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createPackage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::package::PackageResponse>* PackageService::Stub::AsynccreatePackageRaw(::grpc::ClientContext* context, const ::package::PackageData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreatePackageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PackageService::Stub::getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::package::PackageStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::package::PackageStatusRequest, ::package::PackageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPackageStatus_, context, request, response);
}

void PackageService::Stub::async::getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::package::PackageStatusRequest, ::package::PackageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPackageStatus_, context, request, response, std::move(f));
}

void PackageService::Stub::async::getPackageStatus(::grpc::ClientContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPackageStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>* PackageService::Stub::PrepareAsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::package::PackageStatusResponse, ::package::PackageStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPackageStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::package::PackageStatusResponse>* PackageService::Stub::AsyncgetPackageStatusRaw(::grpc::ClientContext* context, const ::package::PackageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPackageStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PackageService::Stub::getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::package::DeliveredCount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::package::VehicleQuery, ::package::DeliveredCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeliveredCountByVehicle_, context, request, response);
}

void PackageService::Stub::async::getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::package::VehicleQuery, ::package::DeliveredCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeliveredCountByVehicle_, context, request, response, std::move(f));
}

void PackageService::Stub::async::getDeliveredCountByVehicle(::grpc::ClientContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeliveredCountByVehicle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>* PackageService::Stub::PrepareAsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::package::DeliveredCount, ::package::VehicleQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeliveredCountByVehicle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::package::DeliveredCount>* PackageService::Stub::AsyncgetDeliveredCountByVehicleRaw(::grpc::ClientContext* context, const ::package::VehicleQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeliveredCountByVehicleRaw(context, request, cq);
  result->StartCall();
  return result;
}

PackageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PackageService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PackageService::Service, ::package::PackageUpdate, ::package::PackageInstruction>(
          [](PackageService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::package::PackageInstruction,
             ::package::PackageUpdate>* stream) {
               return service->updatePackages(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PackageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PackageService::Service, ::package::PackageData, ::package::PackageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PackageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::package::PackageData* req,
             ::package::PackageResponse* resp) {
               return service->createPackage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PackageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PackageService::Service, ::package::PackageStatusRequest, ::package::PackageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PackageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::package::PackageStatusRequest* req,
             ::package::PackageStatusResponse* resp) {
               return service->getPackageStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PackageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PackageService::Service, ::package::VehicleQuery, ::package::DeliveredCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PackageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::package::VehicleQuery* req,
             ::package::DeliveredCount* resp) {
               return service->getDeliveredCountByVehicle(ctx, req, resp);
             }, this)));
}

PackageService::Service::~Service() {
}

::grpc::Status PackageService::Service::updatePackages(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::package::PackageInstruction, ::package::PackageUpdate>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PackageService::Service::createPackage(::grpc::ServerContext* context, const ::package::PackageData* request, ::package::PackageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PackageService::Service::getPackageStatus(::grpc::ServerContext* context, const ::package::PackageStatusRequest* request, ::package::PackageStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PackageService::Service::getDeliveredCountByVehicle(::grpc::ServerContext* context, const ::package::VehicleQuery* request, ::package::DeliveredCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace package

