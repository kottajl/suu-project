// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_service.proto

#include "vehicle_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vehicle {
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.vehicle_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Ack::Ack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckDefaultTypeInternal _Ack_default_instance_;
PROTOBUF_CONSTEXPR TrackRequest::TrackRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vehicle_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackRequestDefaultTypeInternal() {}
  union {
    TrackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackRequestDefaultTypeInternal _TrackRequest_default_instance_;
PROTOBUF_CONSTEXPR DeliveryQuery::DeliveryQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vehicle_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeliveryQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeliveryQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeliveryQueryDefaultTypeInternal() {}
  union {
    DeliveryQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeliveryQueryDefaultTypeInternal _DeliveryQuery_default_instance_;
PROTOBUF_CONSTEXPR DeliveryCount::DeliveryCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeliveryCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeliveryCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeliveryCountDefaultTypeInternal() {}
  union {
    DeliveryCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeliveryCountDefaultTypeInternal _DeliveryCount_default_instance_;
}  // namespace vehicle
static ::_pb::Metadata file_level_metadata_vehicle_5fservice_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_vehicle_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fservice_2eproto = nullptr;

const uint32_t TableStruct_vehicle_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::Location, _impl_.vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::vehicle::Location, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::vehicle::Location, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::Ack, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::TrackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::TrackRequest, _impl_.vehicle_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::DeliveryQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::DeliveryQuery, _impl_.vehicle_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vehicle::DeliveryCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vehicle::DeliveryCount, _impl_.count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vehicle::Location)},
  { 9, -1, -1, sizeof(::vehicle::Ack)},
  { 16, -1, -1, sizeof(::vehicle::TrackRequest)},
  { 23, -1, -1, sizeof(::vehicle::DeliveryQuery)},
  { 30, -1, -1, sizeof(::vehicle::DeliveryCount)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vehicle::_Location_default_instance_._instance,
  &::vehicle::_Ack_default_instance_._instance,
  &::vehicle::_TrackRequest_default_instance_._instance,
  &::vehicle::_DeliveryQuery_default_instance_._instance,
  &::vehicle::_DeliveryCount_default_instance_._instance,
};

const char descriptor_table_protodef_vehicle_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025vehicle_service.proto\022\007vehicle\"C\n\010Loca"
  "tion\022\022\n\nvehicle_id\030\001 \001(\005\022\020\n\010latitude\030\002 \001"
  "(\001\022\021\n\tlongitude\030\003 \001(\001\"\026\n\003Ack\022\017\n\007message\030"
  "\001 \001(\t\"\"\n\014TrackRequest\022\022\n\nvehicle_id\030\001 \001("
  "\005\"#\n\rDeliveryQuery\022\022\n\nvehicle_id\030\001 \001(\005\"\036"
  "\n\rDeliveryCount\022\r\n\005count\030\001 \001(\0052\311\001\n\016Vehic"
  "leService\0221\n\014sendLocation\022\021.vehicle.Loca"
  "tion\032\014.vehicle.Ack(\001\022:\n\014trackVehicle\022\025.v"
  "ehicle.TrackRequest\032\021.vehicle.Location0\001"
  "\022H\n\026getPackagesDeliveredBy\022\026.vehicle.Del"
  "iveryQuery\032\026.vehicle.DeliveryCountb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_vehicle_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vehicle_5fservice_2eproto = {
    false, false, 442, descriptor_table_protodef_vehicle_5fservice_2eproto,
    "vehicle_service.proto",
    &descriptor_table_vehicle_5fservice_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_vehicle_5fservice_2eproto::offsets,
    file_level_metadata_vehicle_5fservice_2eproto, file_level_enum_descriptors_vehicle_5fservice_2eproto,
    file_level_service_descriptors_vehicle_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vehicle_5fservice_2eproto_getter() {
  return &descriptor_table_vehicle_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vehicle_5fservice_2eproto(&descriptor_table_vehicle_5fservice_2eproto);
namespace vehicle {

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.vehicle_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vehicle_id_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.vehicle_id_));
  // @@protoc_insertion_point(copy_constructor:vehicle.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.vehicle_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:vehicle.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vehicle_id_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.vehicle_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vehicle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_vehicle_id() != 0) {
    _this->_internal_set_vehicle_id(from._internal_vehicle_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.vehicle_id_)
      + sizeof(Location::_impl_.vehicle_id_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fservice_2eproto_getter, &descriptor_table_vehicle_5fservice_2eproto_once,
      file_level_metadata_vehicle_5fservice_2eproto[0]);
}

// ===================================================================

class Ack::_Internal {
 public:
};

Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vehicle.Ack)
}

inline void Ack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:vehicle.Ack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Ack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vehicle.Ack.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vehicle.Ack.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ack::GetClassData() const { return &_class_data_; }


void Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ack*>(&to_msg);
  auto& from = static_cast<const Ack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.Ack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fservice_2eproto_getter, &descriptor_table_vehicle_5fservice_2eproto_once,
      file_level_metadata_vehicle_5fservice_2eproto[1]);
}

// ===================================================================

class TrackRequest::_Internal {
 public:
};

TrackRequest::TrackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.TrackRequest)
}
TrackRequest::TrackRequest(const TrackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vehicle_id_ = from._impl_.vehicle_id_;
  // @@protoc_insertion_point(copy_constructor:vehicle.TrackRequest)
}

inline void TrackRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrackRequest::~TrackRequest() {
  // @@protoc_insertion_point(destructor:vehicle.TrackRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrackRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.TrackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicle_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vehicle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.TrackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.TrackRequest)
  return target;
}

size_t TrackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.TrackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackRequest::GetClassData() const { return &_class_data_; }


void TrackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackRequest*>(&to_msg);
  auto& from = static_cast<const TrackRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.TrackRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vehicle_id() != 0) {
    _this->_internal_set_vehicle_id(from._internal_vehicle_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackRequest::CopyFrom(const TrackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.TrackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackRequest::IsInitialized() const {
  return true;
}

void TrackRequest::InternalSwap(TrackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vehicle_id_, other->_impl_.vehicle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fservice_2eproto_getter, &descriptor_table_vehicle_5fservice_2eproto_once,
      file_level_metadata_vehicle_5fservice_2eproto[2]);
}

// ===================================================================

class DeliveryQuery::_Internal {
 public:
};

DeliveryQuery::DeliveryQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.DeliveryQuery)
}
DeliveryQuery::DeliveryQuery(const DeliveryQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeliveryQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.vehicle_id_ = from._impl_.vehicle_id_;
  // @@protoc_insertion_point(copy_constructor:vehicle.DeliveryQuery)
}

inline void DeliveryQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vehicle_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeliveryQuery::~DeliveryQuery() {
  // @@protoc_insertion_point(destructor:vehicle.DeliveryQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeliveryQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeliveryQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeliveryQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.DeliveryQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vehicle_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeliveryQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vehicle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vehicle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeliveryQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.DeliveryQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vehicle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.DeliveryQuery)
  return target;
}

size_t DeliveryQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.DeliveryQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vehicle_id = 1;
  if (this->_internal_vehicle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeliveryQuery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeliveryQuery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeliveryQuery::GetClassData() const { return &_class_data_; }


void DeliveryQuery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeliveryQuery*>(&to_msg);
  auto& from = static_cast<const DeliveryQuery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.DeliveryQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vehicle_id() != 0) {
    _this->_internal_set_vehicle_id(from._internal_vehicle_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeliveryQuery::CopyFrom(const DeliveryQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.DeliveryQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryQuery::IsInitialized() const {
  return true;
}

void DeliveryQuery::InternalSwap(DeliveryQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.vehicle_id_, other->_impl_.vehicle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeliveryQuery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fservice_2eproto_getter, &descriptor_table_vehicle_5fservice_2eproto_once,
      file_level_metadata_vehicle_5fservice_2eproto[3]);
}

// ===================================================================

class DeliveryCount::_Internal {
 public:
};

DeliveryCount::DeliveryCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vehicle.DeliveryCount)
}
DeliveryCount::DeliveryCount(const DeliveryCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeliveryCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:vehicle.DeliveryCount)
}

inline void DeliveryCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeliveryCount::~DeliveryCount() {
  // @@protoc_insertion_point(destructor:vehicle.DeliveryCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeliveryCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeliveryCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeliveryCount::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.DeliveryCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeliveryCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeliveryCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.DeliveryCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.DeliveryCount)
  return target;
}

size_t DeliveryCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.DeliveryCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeliveryCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeliveryCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeliveryCount::GetClassData() const { return &_class_data_; }


void DeliveryCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeliveryCount*>(&to_msg);
  auto& from = static_cast<const DeliveryCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vehicle.DeliveryCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeliveryCount::CopyFrom(const DeliveryCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.DeliveryCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryCount::IsInitialized() const {
  return true;
}

void DeliveryCount::InternalSwap(DeliveryCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeliveryCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vehicle_5fservice_2eproto_getter, &descriptor_table_vehicle_5fservice_2eproto_once,
      file_level_metadata_vehicle_5fservice_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vehicle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vehicle::Location*
Arena::CreateMaybeMessage< ::vehicle::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::Ack*
Arena::CreateMaybeMessage< ::vehicle::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::TrackRequest*
Arena::CreateMaybeMessage< ::vehicle::TrackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::TrackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::DeliveryQuery*
Arena::CreateMaybeMessage< ::vehicle::DeliveryQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::DeliveryQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::vehicle::DeliveryCount*
Arena::CreateMaybeMessage< ::vehicle::DeliveryCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vehicle::DeliveryCount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
