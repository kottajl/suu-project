// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicle_service.proto

#include "vehicle_service.pb.h"
#include "vehicle_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace vehicle {

static const char* VehicleService_method_names[] = {
  "/vehicle.VehicleService/sendLocation",
  "/vehicle.VehicleService/trackVehicle",
  "/vehicle.VehicleService/getPackagesDeliveredBy",
};

std::unique_ptr< VehicleService::Stub> VehicleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VehicleService::Stub> stub(new VehicleService::Stub(channel, options));
  return stub;
}

VehicleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sendLocation_(VehicleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_trackVehicle_(VehicleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_getPackagesDeliveredBy_(VehicleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::vehicle::Location>* VehicleService::Stub::sendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response) {
  return ::grpc::internal::ClientWriterFactory< ::vehicle::Location>::Create(channel_.get(), rpcmethod_sendLocation_, context, response);
}

void VehicleService::Stub::async::sendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::ClientWriteReactor< ::vehicle::Location>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::vehicle::Location>::Create(stub_->channel_.get(), stub_->rpcmethod_sendLocation_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::vehicle::Location>* VehicleService::Stub::AsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::vehicle::Location>::Create(channel_.get(), cq, rpcmethod_sendLocation_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::vehicle::Location>* VehicleService::Stub::PrepareAsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::vehicle::Location>::Create(channel_.get(), cq, rpcmethod_sendLocation_, context, response, false, nullptr);
}

::grpc::ClientReader< ::vehicle::Location>* VehicleService::Stub::trackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vehicle::Location>::Create(channel_.get(), rpcmethod_trackVehicle_, context, request);
}

void VehicleService::Stub::async::trackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest* request, ::grpc::ClientReadReactor< ::vehicle::Location>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vehicle::Location>::Create(stub_->channel_.get(), stub_->rpcmethod_trackVehicle_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vehicle::Location>* VehicleService::Stub::AsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vehicle::Location>::Create(channel_.get(), cq, rpcmethod_trackVehicle_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vehicle::Location>* VehicleService::Stub::PrepareAsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vehicle::Location>::Create(channel_.get(), cq, rpcmethod_trackVehicle_, context, request, false, nullptr);
}

::grpc::Status VehicleService::Stub::getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::vehicle::DeliveryCount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPackagesDeliveredBy_, context, request, response);
}

void VehicleService::Stub::async::getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPackagesDeliveredBy_, context, request, response, std::move(f));
}

void VehicleService::Stub::async::getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPackagesDeliveredBy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>* VehicleService::Stub::PrepareAsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vehicle::DeliveryCount, ::vehicle::DeliveryQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPackagesDeliveredBy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>* VehicleService::Stub::AsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPackagesDeliveredByRaw(context, request, cq);
  result->StartCall();
  return result;
}

VehicleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< VehicleService::Service, ::vehicle::Location, ::vehicle::Ack>(
          [](VehicleService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::vehicle::Location>* reader,
             ::vehicle::Ack* resp) {
               return service->sendLocation(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< VehicleService::Service, ::vehicle::TrackRequest, ::vehicle::Location>(
          [](VehicleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::TrackRequest* req,
             ::grpc::ServerWriter<::vehicle::Location>* writer) {
               return service->trackVehicle(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VehicleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VehicleService::Service, ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](VehicleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vehicle::DeliveryQuery* req,
             ::vehicle::DeliveryCount* resp) {
               return service->getPackagesDeliveredBy(ctx, req, resp);
             }, this)));
}

VehicleService::Service::~Service() {
}

::grpc::Status VehicleService::Service::sendLocation(::grpc::ServerContext* context, ::grpc::ServerReader< ::vehicle::Location>* reader, ::vehicle::Ack* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VehicleService::Service::trackVehicle(::grpc::ServerContext* context, const ::vehicle::TrackRequest* request, ::grpc::ServerWriter< ::vehicle::Location>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VehicleService::Service::getPackagesDeliveredBy(::grpc::ServerContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vehicle

