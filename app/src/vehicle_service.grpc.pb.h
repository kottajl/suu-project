// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vehicle_service.proto
#ifndef GRPC_vehicle_5fservice_2eproto__INCLUDED
#define GRPC_vehicle_5fservice_2eproto__INCLUDED

#include "vehicle_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace vehicle {

class VehicleService final {
 public:
  static constexpr char const* service_full_name() {
    return "vehicle.VehicleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::vehicle::Location>> sendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::vehicle::Location>>(sendLocationRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>> AsyncsendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>>(AsyncsendLocationRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>> PrepareAsyncsendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>>(PrepareAsyncsendLocationRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::vehicle::Location>> trackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::vehicle::Location>>(trackVehicleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>> AsynctrackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>>(AsynctrackVehicleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>> PrepareAsynctrackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>>(PrepareAsynctrackVehicleRaw(context, request, cq));
    }
    virtual ::grpc::Status getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::vehicle::DeliveryCount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>> AsyncgetPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>>(AsyncgetPackagesDeliveredByRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>> PrepareAsyncgetPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>>(PrepareAsyncgetPackagesDeliveredByRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::ClientWriteReactor< ::vehicle::Location>* reactor) = 0;
      virtual void trackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest* request, ::grpc::ClientReadReactor< ::vehicle::Location>* reactor) = 0;
      virtual void getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::vehicle::Location>* sendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>* AsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::vehicle::Location>* PrepareAsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::vehicle::Location>* trackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>* AsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::vehicle::Location>* PrepareAsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>* AsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vehicle::DeliveryCount>* PrepareAsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::vehicle::Location>> sendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::vehicle::Location>>(sendLocationRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::vehicle::Location>> AsyncsendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::vehicle::Location>>(AsyncsendLocationRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::vehicle::Location>> PrepareAsyncsendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::vehicle::Location>>(PrepareAsyncsendLocationRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::vehicle::Location>> trackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::vehicle::Location>>(trackVehicleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::Location>> AsynctrackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::Location>>(AsynctrackVehicleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::Location>> PrepareAsynctrackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::vehicle::Location>>(PrepareAsynctrackVehicleRaw(context, request, cq));
    }
    ::grpc::Status getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::vehicle::DeliveryCount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>> AsyncgetPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>>(AsyncgetPackagesDeliveredByRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>> PrepareAsyncgetPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>>(PrepareAsyncgetPackagesDeliveredByRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendLocation(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::ClientWriteReactor< ::vehicle::Location>* reactor) override;
      void trackVehicle(::grpc::ClientContext* context, const ::vehicle::TrackRequest* request, ::grpc::ClientReadReactor< ::vehicle::Location>* reactor) override;
      void getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, std::function<void(::grpc::Status)>) override;
      void getPackagesDeliveredBy(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::vehicle::Location>* sendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response) override;
    ::grpc::ClientAsyncWriter< ::vehicle::Location>* AsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::vehicle::Location>* PrepareAsyncsendLocationRaw(::grpc::ClientContext* context, ::vehicle::Ack* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::vehicle::Location>* trackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request) override;
    ::grpc::ClientAsyncReader< ::vehicle::Location>* AsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::vehicle::Location>* PrepareAsynctrackVehicleRaw(::grpc::ClientContext* context, const ::vehicle::TrackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>* AsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vehicle::DeliveryCount>* PrepareAsyncgetPackagesDeliveredByRaw(::grpc::ClientContext* context, const ::vehicle::DeliveryQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_trackVehicle_;
    const ::grpc::internal::RpcMethod rpcmethod_getPackagesDeliveredBy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendLocation(::grpc::ServerContext* context, ::grpc::ServerReader< ::vehicle::Location>* reader, ::vehicle::Ack* response);
    virtual ::grpc::Status trackVehicle(::grpc::ServerContext* context, const ::vehicle::TrackRequest* request, ::grpc::ServerWriter< ::vehicle::Location>* writer);
    virtual ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendLocation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLocation(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::vehicle::Location>* /*reader*/, ::vehicle::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLocation(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::vehicle::Ack, ::vehicle::Location>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_trackVehicle() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttrackVehicle(::grpc::ServerContext* context, ::vehicle::TrackRequest* request, ::grpc::ServerAsyncWriter< ::vehicle::Location>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPackagesDeliveredBy(::grpc::ServerContext* context, ::vehicle::DeliveryQuery* request, ::grpc::ServerAsyncResponseWriter< ::vehicle::DeliveryCount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendLocation<WithAsyncMethod_trackVehicle<WithAsyncMethod_getPackagesDeliveredBy<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendLocation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::vehicle::Location, ::vehicle::Ack>(
            [this](
                   ::grpc::CallbackServerContext* context, ::vehicle::Ack* response) { return this->sendLocation(context, response); }));
    }
    ~WithCallbackMethod_sendLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLocation(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::vehicle::Location>* /*reader*/, ::vehicle::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::vehicle::Location>* sendLocation(
      ::grpc::CallbackServerContext* /*context*/, ::vehicle::Ack* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_trackVehicle() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::vehicle::TrackRequest, ::vehicle::Location>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::TrackRequest* request) { return this->trackVehicle(context, request); }));
    }
    ~WithCallbackMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::vehicle::Location>* trackVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vehicle::DeliveryQuery* request, ::vehicle::DeliveryCount* response) { return this->getPackagesDeliveredBy(context, request, response); }));}
    void SetMessageAllocatorFor_getPackagesDeliveredBy(
        ::grpc::MessageAllocator< ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPackagesDeliveredBy(
      ::grpc::CallbackServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendLocation<WithCallbackMethod_trackVehicle<WithCallbackMethod_getPackagesDeliveredBy<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendLocation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLocation(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::vehicle::Location>* /*reader*/, ::vehicle::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_trackVehicle() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendLocation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLocation(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::vehicle::Location>* /*reader*/, ::vehicle::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendLocation(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_trackVehicle() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesttrackVehicle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPackagesDeliveredBy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendLocation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->sendLocation(context, response); }));
    }
    ~WithRawCallbackMethod_sendLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendLocation(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::vehicle::Location>* /*reader*/, ::vehicle::Ack* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* sendLocation(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_trackVehicle() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->trackVehicle(context, request); }));
    }
    ~WithRawCallbackMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* trackVehicle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPackagesDeliveredBy(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPackagesDeliveredBy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPackagesDeliveredBy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPackagesDeliveredBy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vehicle::DeliveryQuery, ::vehicle::DeliveryCount>* streamer) {
                       return this->StreamedgetPackagesDeliveredBy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPackagesDeliveredBy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPackagesDeliveredBy(::grpc::ServerContext* /*context*/, const ::vehicle::DeliveryQuery* /*request*/, ::vehicle::DeliveryCount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPackagesDeliveredBy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vehicle::DeliveryQuery,::vehicle::DeliveryCount>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getPackagesDeliveredBy<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_trackVehicle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_trackVehicle() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::vehicle::TrackRequest, ::vehicle::Location>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::vehicle::TrackRequest, ::vehicle::Location>* streamer) {
                       return this->StreamedtrackVehicle(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_trackVehicle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status trackVehicle(::grpc::ServerContext* /*context*/, const ::vehicle::TrackRequest* /*request*/, ::grpc::ServerWriter< ::vehicle::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedtrackVehicle(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::vehicle::TrackRequest,::vehicle::Location>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_trackVehicle<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_trackVehicle<WithStreamedUnaryMethod_getPackagesDeliveredBy<Service > > StreamedService;
};

}  // namespace vehicle


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_vehicle_5fservice_2eproto__INCLUDED
